#uses algorithm from biprite.py (found in 'Other Solutions' folder)
#renamed for clarity and adjusted to work with Graphs.py
class BipartiteGraph:
    def __init__(self, m, n):
        self.L1 = [0]
        self.L2 = [0]
        self.edges = [[]]
        self.bipartite(m, n)


    def add_vertices(self, m, n):
        if (m < 2) or (n < 2):
            raise ValueError('Values m and n must be greater than or equal to 2')
        else:
            for i in range(1, m + 1):
                self.L1.append(i)
            if len(self.L1) > 1:
                self.L1[1] = 1
            if n > 1:
                self.L2.append(1)
            for i in range(2, n + 1):
                x = self.L2[i - 1] + m
                self.L2.append(x)


    #function generated by chatGPT
    def add_edges(self):
        self.edges = [[a + b for b in self.L2] for a in self.L1]


    def display(self):
        #print edge matrix without brackets
        for row in self.edges:
            print(*row)


    def bipartite(self, m, n):
        self.add_vertices(m,n)
        self.add_edges()
        self.display()





